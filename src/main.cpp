#include "Common.h"

// init everything - SDL, if it is nonzero we have a problem


void render()
{
	//set the clear colour(background)
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	//clear the colour and depth buffer
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
}

void update()
{
}

int main(int argc, char * arg[])
{
	bool run = true;

	if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
	{
		std::cout << "ERROR SDL_Init" << SDL_GetError() << std::endl;

		
		return -1;
	}
	//Create a window
	SDL_Window * window = SDL_CreateWindow("SDL", // window title
		SDL_WINDOWPOS_CENTERED, // x position, centered
		SDL_WINDOWPOS_CENTERED, //y position, centered
		640,					//width, in pixels
		480,						//height, in pixels
		SDL_WINDOW_OPENGL						//flags
		);
	//Create an OpenGL context associated with the window.
	SDL_GLContext glcontext = SDL_GL_CreateContext(window);

	//Initialisation
	//Call our InitOpenGL Function
	initOpenGL();

	//Value to hold the event generated by SDL
	SDL_Event event;
	//Game Loop
	while (run)
	{
		//While we still have events in the queue
		while (SDL_PollEvent(&event)){
			//Get event type
			if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE){
			//set our boolean which controls the loop to false
				run = false;

			}

		}
		//update
		update();
		//Then Draw
		render();

		//Call swap so that our GL back buffer is displayed
		SDL_GL_SwapWindow(window);

	}
	SDL_DestroyWindow(window);
	SDL_Quit();
    return 0;

	//clean up, reverse order!!!
	SDL_GL_DeleteContext(glcontext);
	SDL_DestroyWindow(window);
	SDL_Quit();
}

